" Required for NERDTree and other plugins
execute pathogen#infect()

" check one time after 4s of inactivity in normal mode
set autoread
au CursorHold * checktime

" Use spacebar as the default prefix key. To use this have :noremap <leader> other keys
let mapleader=" "

" Current filetype detection and syntax highlighting
filetype on
syntax on

" Show line numbers by default
set number

" Vim throws away buffers by default when you switch out of them, unless set :hidden is turned on. Then it behaves like any other normal application with multiple buffers
set hidden

" The number of : entires that will be stored
set history=100

" Enable language-dependent indenting and filetype detection. Add language specific settings (tabstope,smarttab,autoindent,shiftwidth,expandtab) in eg. ~/.vim/ftplugin/python.vim
filetype plugin indent on

" Automatically switch context to the directory in which current file is present
set autochdir

" Necesary for lots of cool vim things
set nocompatible

" General Syntax Highlighting options
set showmatch " show matching bracket
set ignorecase " search ignoring case
set hlsearch " highlight all search matches
set incsearch " incremental search as soon as you start typing

" Prevent copy/paste problems after exiting vim
set t_BE=

" This remembers where you were the last time you edited the file, and returns to the same position.
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Use Ctrl+S for saving
if has("gui_running")
  " If the current buffer has never been saved, it will have no name,
  " call the file browser to save it, otherwise just save it.
  :map <silent> <C-S> :if expand("%") == ""<CR>:browse confirm w!<CR>:else<CR>:confirm w!<CR>:endif<CR>
  :imap <c-s> <Esc><c-s>
endif

" Nerd Tree Configuration
let NERDTreeMapActivateNode='<right>'
" NerdTree will remain hidden
nnoremap <silent> <special> <leader>n :NERDTreeToggle <Bar> if &filetype ==# 'nerdtree' <Bar> wincmd p <Bar> endif<CR>
"nmap <leader>n :NERDTreeToggle<CR>
"nmap <leader>j :NERDTreeFind<CR>
"autocmd VimEnter * NERDTree " autostart nerdtree
"autocmd VimEnter * wincmd p " ensure cursor is not in nerdtree on autostart
let NERDTreeShowHidden= 0
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp']
set diffopt=filler,iwhite     " ignore all whitespace and sync
" Close nerdtree if it the only thing open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Match It plugin configuration is language specific and installed in plugin/matchit.vim
source ~/.vim/plugin/matchit.vim
"" If this variable is set, augroup is defined, and start highlighting.
let g:hl_matchit_enable_on_vim_startup = 1

"" you can specify highlight group. see :highlight
let g:hl_matchit_hl_groupname = 'Search'
let g:hl_matchit_speed_level = 1

" Version Control Plugin
" https://www.vim.org/scripts/script.php?script_id=90

" Indent Line Plugin settings
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_enabled = 0

" Theme configuration
set background=dark
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_vert_split = 'fg0'
colorscheme gruvbox "koehler
set termguicolors
let g:gruvbox_hls_cursor = 'red'
" Colorscheme for the bottom bar that's easy on the eyes
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified', 'charvaluehex' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'filepaths', 'filetype', 'charvaluehex' ] ]
      \ },
      \ 'component': {
      \   'charvaluehex': '0x%B',
      \   'filepaths': '%F'
      \ },
      \ }
set noshowmode " Remove redundant status display when using lightline
set guifont=Fira\ Code\ 14

" Set encoding
set encoding=utf-8

" General Indentation
set tabstop=8 softtabstop=0 " show existing tab with 4 spaces width
set shiftwidth=4 " when indenting with '>', use 4 spaces width
set expandtab " Expand tab to space
set smarttab
set linespace=5 " Space between lines
set autoindent
set undolevels=100           " 100 undos
set updatecount=100           " switch every 100 chars

" Key bindings
" Toggle off highlighting - Prese Esc
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
" Go to next tab
nnoremap <Tab> gt  
" Go to previous tab
nnoremap <S-Tab> gT
" map F3 to save and quit
map <F3> :wq<CR>
" map F to quit without saving changes
map <F4> :q!<CR>
" command :VCSVimDiff to display differences between the most recent version of the file and the checked-in version of the file - Press F12
map <F12> :VCSVimDiff<CR>
" Map F6 for indentline plugin
nnoremap <silent> <F6> :IndentLinesToggle<CR>:LeadingSpaceToggle<CR>
" Backspace settings
set backspace=indent,eol,start
set bs=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Language specifics
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Verilog/System Verilog
" https://www.vim.org/scripts/script.php?script_id=1586 If your scripts are loaded correctly, you should see this syntax name when you execute the Vim command :set syntax? in your Verilog/SystemVerilog files
" Use spaces of indent 2 and tab of size 4 expanded
" Reuse Methodology Manual Guideline â€“ Use indentation of 2 spaces. Larger indentation (for example, 8 spaces) restricts line length when there are several levels of nesting. Avoid using tabs.
autocmd BufRead,BufNewFile *.v,*.vh set filetype=verilog
autocmd BufRead,BufNewFile *.v,*.vh set expandtab tabstop=4 softtabstop=2 shiftwidth=2
autocmd BufRead,BufNewFile *.sv,*.svi set filetype=verilog_systemverilog
autocmd BufRead,BufNewFile *.sv,*.svi set expandtab tabstop=4 softtabstop=2 shiftwidth=2
autocmd BufRead,BufNewFile *.s,*.sct set filetype=armasm
" TBD Settings for https://github.com/vhda/verilog_systemverilog.vim
"set foldmethod=syntax
"let g:verilog_syntax_fold_lst = REMOVE"all"
"let g:verilog_efm_uvm_lst = REMOVE"all"
"set makeprg=/usr/local/bin/iverilog\ %
"set tags=./tags;

" Verilog mode has been installed
" Use the following:  (where \ is the leader key)
" \a expands all the verilog-mode autos (similar to C-c C-a in emacs). 
" \d collapses all the verilog-mode autos (similar to C-c C-d in emacs). 

" MatchIT config - Press % to match start/end
if exists('loaded_matchit')
let b:match_ignorecase=0
let b:match_words=
  \ '\<begin\>:\<end\>,' .
  \ '\<if\>:\<else\>,' .
  \ '\<module\>:\<endmodule\>,' .
  \ '\<class\>:\<endclass\>,' .
  \ '\<program\>:\<endprogram\>,' .
  \ '\<clocking\>:\<endclocking\>,' .
  \ '\<property\>:\<endproperty\>,' .
  \ '\<sequence\>:\<endsequence\>,' .
  \ '\<package\>:\<endpackage\>,' .
  \ '\<covergroup\>:\<endgroup\>,' .
  \ '\<primitive\>:\<endprimitive\>,' .
  \ '\<specify\>:\<endspecify\>,' .
  \ '\<generate\>:\<endgenerate\>,' .
  \ '\<interface\>:\<endinterface\>,' .
  \ '\<function\>:\<endfunction\>,' .
  \ '\<task\>:\<endtask\>,' .
  \ '\<case\>\|\<casex\>\|\<casez\>:\<endcase\>,' .
  \ '\<fork\>:\<join\>\|\<join_any\>\|\<join_none\>,' .
  \ '`ifdef\>:`else\>:`endif\>,'
endif

" To view the type of whitespace used for the file being edited
set listchars=eol:$,tab:\>\ ,trail:.,extends:>,precedes:<
set nolist   " to turn on (use :set list to turn on)

" Syntastic settings | Add syntastic plugins as and when necessary
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Other Plugins installed:
" Tabular (Pathogen) refer http://vimcasts.org/episodes/aligning-text-with-tabular-vim/; Eg: :Tab /= will align all assignments https://github.com/godlygeek/tabular
