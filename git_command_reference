# Initialize a repository
git init
# Add files
git add .
# Commit
git commit -m "First commit"
# Sets the new remote
git remote add origin <https://github.com/user/repo.git>
# Verifies the new remote URL
git remote -v
# Pushes the changes in your local repository up to the remote repository you specified as the origin
git push origin master

# To show source of cloned repository
git remote show origin
# Already cloned repository submodule update
git clone git://github.com/foo/bar.git
cd bar
git submodule update --init --recursive
# To clone with submodules
git clone --recursive GIT-REPO-URL

# Git basics

* git config --list - To display username and email
* git config --global user.[name/email]
* Clone repository with git clone
* Create a new branch with git checkout -b
* Make changes, git status
* Add any new files with git add
* Commit using git commit -m ""
* git checkout master to switch to master
* git merge <branch_name> to merge current with another branch
* git push origin master to send changes


## Update submodules to most recent
git submodule update --remote --merge

## Restore a file that was deleted but not committed
git checkout -- <file>

## View Parent URL
git remote show origin

## Restore to a previous commit version
git log --oneline
git checkout <commit_id> .
git add -A
git commit -m "Revert commit: xxxx"
git push

## Add license to a Github repository easily
https://github.com/<user>/<repo>/community/license/new?branch=master&template=cc0-1.0

## Branches
- Update to Master
git pull
- Create new branch
git checkout -b [new_branch]
- Push to Github
git push origin [new_branch]
- See all branches
git branch -a
- Delete branch locally
git branch -d [new_branch]
- Delete branch on Github
git push origin :[new_branch]

## Go back to a specific commit in a private project
git reset --hard <commidId> && git push --force
# This will remove all commits after the particular commit ID and is dangerous on a public repo


## If you have issues pushing files >100MB you can try with this switch or use git LFS
git config --global http.postBuffer 100000000
OR
Push in multiple commits

## To undo git add before a commit:
Run git reset <file> or git reset to unstage all changes.

## To uncommit in case you have not pushed the commit publicly yet
git reset HEAD~1 --soft

# Get the submodule initially
git submodule add ssh://bla submodule_dir
git submodule init
# Time passes, submodule upstream is updated
# and you now want to update
# Change to the submodule directory
cd submodule_dir
# Checkout desired branch
git checkout master
# Update
git pull
# Get back to your project root
cd ..
# Now the submodules are in the state you want, so
git commit -am "Pulled down update to submodule_dir"
